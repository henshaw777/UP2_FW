// /** @file
//  CPU Power Setup formset.
//
//  Copyright (c) 1999 - 2017, Intel Corporation. All rights reserved.<BR>
//
//  This program and the accompanying materials
//  are licensed and made available under the terms and conditions of the BSD License
//  which accompanies this distribution.  The full text of the license may be found at
//  http://opensource.org/licenses/bsd-license.php.
//
//  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
//  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
//
// **/


form formid = CPU_PWR_CONFIGURATION_FORM_ID,

  title  = STRING_TOKEN(STR_CPU_POWERMNG_TITLE);

  subtitle text = STRING_TOKEN(STR_SYSTEM_POWER_OPTIONS);

  oneof varid     = Setup.EnableGv,
    prompt      = STRING_TOKEN(STR_CPU_IST_PROMPT),
    help        = STRING_TOKEN(STR_CPU_IST_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  //suppressif ideqval Setup.EnableGv == 0;
  oneof varid = Setup.BootPState,
    prompt  = STRING_TOKEN (STR_BOOT_P_STATE),
    help = STRING_TOKEN (STR_BOOT_P_STATE_HELP),
    option text = STRING_TOKEN (STR_BOOT_P_STATE_MAX), value = 0, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN (STR_BOOT_P_STATE_MIN), value = 1, flags = RESET_REQUIRED;
  endoneof;
  //endif;

  suppressif ideqval Setup.EnableGv == 0;
  oneof varid  = Setup.TurboModeEnable,
    prompt = STRING_TOKEN(STR_PROCESSOR_TURBO_MODE),
    help = STRING_TOKEN(STR_PROCESSOR_TURBO_MODE_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
  endoneof;
  endif;

  oneof varid  = Setup.EnableCx,
    prompt = STRING_TOKEN(STR_CSTATE_PROMPT),
    help = STRING_TOKEN(STR_CSTATE_PROMPT_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
  endoneof;

  suppressif ideqval Setup.EnableCx == 0 ;
    oneof varid     = Setup.EnableCxe,
      prompt      = STRING_TOKEN(STR_CXE_PROMPT),
      help        = STRING_TOKEN(STR_CXE_PROMPT_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

  disableif ideqval Setup.PmicSetupDefault == 1;
    oneof varid     = Setup.MaxPkgCState,
      prompt      = STRING_TOKEN(STR_MAX_PKG_CSTATE_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_MAX_PKG_CSTATE_STATE_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C2),  value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C1),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C0),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;
  
  suppressif TRUE;
  text
   help   = STRING_TOKEN(STR_MAX_PKG_CSTATE_STATE_SUPPORT_HELP),
    text   = STRING_TOKEN(STR_MAX_PKG_CSTATE_SUPPORT_PROMPT),
    text   = STRING_TOKEN(STR_MAX_PKG_CSTATE_C0),
    flags  = 0,
    key    = 0;
  endif;

    oneof varid     = Setup.MaxCoreCState,
      prompt      = STRING_TOKEN(STR_MAX_CORE_CSTATE_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_MAX_CORE_CSTATE_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_FC),  value = 8, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C10), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C9),  value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C8),  value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C7),  value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C6),  value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C1),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C0),  value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = SETUP_DATA.CStateAutoDemotion,
      prompt      = STRING_TOKEN(STR_CST_AUTO_DEMOTION),
      help        = STRING_TOKEN(STR_CST_AUTO_DEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C3_AUTO_DEMOTION), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AND_C3_AUTO_DEMOTION), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = Setup.CStateUnDemotion,
      prompt      = STRING_TOKEN(STR_CST_UNDEMOTION),
      help        = STRING_TOKEN(STR_CST_UNDEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C3_AUTO_DEMOTION), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AND_C3_AUTO_DEMOTION), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = Setup.PkgCStateDemotion,
      prompt      = STRING_TOKEN(STR_PKG_CST_DEMOTION),
      help        = STRING_TOKEN(STR_PKG_CST_DEMOTION),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid     = Setup.PkgCStateUnDemotion,
      prompt      = STRING_TOKEN(STR_PKG_CST_UNDEMOTION),
      help        = STRING_TOKEN(STR_PKG_CST_UNDEMOTION),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval Setup.EnableGv == 0;
    text
      help   = STRING_TOKEN(STR_NULL_STRING),
      text   = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_STRING),
      text   = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_VALUE),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_NULL_STRING),
      text   = STRING_TOKEN(STR_SHORT_DUR_PWR_LIMIT_STRING),
      text   = STRING_TOKEN(STR_SHORT_DUR_PWR_LIMIT_VALUE),
      flags  = 0,
      key    = 0;

    oneof varid    = Setup.PowerLimit1Enable,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;
  
  suppressif  ideqval Setup.EnableGv == 0
           OR ideqval Setup.PowerLimit1Enable == 0;
    oneof varid    = Setup.PowerLimit1Clamp,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_CLAMP_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_CLAMP_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = Setup.PowerLimit1,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_6), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_7), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_8), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_9), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_10), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_11), value = 11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_12), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_13), value = 13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_14), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_15), value = 15, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_16), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_17), value = 17, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_18), value = 18, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_19), value = 19, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_20), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_21), value = 21, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_22), value = 22, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_23), value = 23, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_24), value = 24, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_25), value = 25, flags = RESET_REQUIRED;
    endoneof;

    oneof varid    = Setup.PowerLimit1Time,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_TIME_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_TIME_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_3), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_4), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_5), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_6), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_7), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_8), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_10), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_12), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_14), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_16), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_20), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_24), value = 24, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_28), value = 28, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_32), value = 32, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_40), value = 40, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_48), value = 48, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_56), value = 56, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_64), value = 64, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_80), value = 80, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_96), value = 96, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_112), value = 112, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_128), value = 128, flags = RESET_REQUIRED;
    endoneof;
  endif;

endform;