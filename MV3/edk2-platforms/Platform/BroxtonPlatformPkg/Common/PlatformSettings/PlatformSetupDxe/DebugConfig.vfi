// /** @file
//  Debug Configuration formset.
//
//  Copyright (c) 1999 - 2017, Intel Corporation. All rights reserved.<BR>
//
//  This program and the accompanying materials
//  are licensed and made available under the terms and conditions of the BSD License
//  which accompanies this distribution.  The full text of the license may be found at
//  http://opensource.org/licenses/bsd-license.php.
//
//  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
//  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
//
// **/


form formid = DEBUG_CONFIGURATION_FORM_ID,
  title    = STRING_TOKEN(STR_DEBUG_CONFIGURATION_TITLE);


  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_OSDBG_STRING);

  oneof varid  = Setup.OsDbgEnable,
    prompt   = STRING_TOKEN (STR_OSDBG_PROMPT),
    help     = STRING_TOKEN (STR_OSDBG_HELP),
    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_TXE_DEBUG_OPTION_STRING);

  oneof varid   = SETUP_DATA.SeCEOPEnable,
    prompt      = STRING_TOKEN(STR_TXE_END_OF_POST_PROMPT),
    help        = STRING_TOKEN(STR_TXE_END_OF_POST_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_PTT_DEBUG_OPTION_STRING);

  oneof varid   = SETUP_DATA.PttSuppressCommandSend,
    prompt      = STRING_TOKEN(STR_PTT_SUPPRESS_COMMAND_PROMPT),
    help        = STRING_TOKEN(STR_PTT_SUPPRESS_COMMAND_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_TDO_STRING);
    oneof varid   = Setup.TDO,
      prompt      = STRING_TOKEN(STR_TDO_PROMPT),
      help        = STRING_TOKEN(STR_TDO_HELP),
      option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);
    oneof   varid   = Setup.SMRREnable,
      prompt      = STRING_TOKEN(STR_SMRR),
      help        = STRING_TOKEN(STR_SMRR_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);
    oneof   varid   = Setup.Max2G,
      prompt      = STRING_TOKEN(STR_MAX_MEM_2G),
      help        = STRING_TOKEN(STR_MAX_MEM_2G_HELP),
      option text = STRING_TOKEN(STR_ENABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof; 

#ifdef PRAM_SUPPORT
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
    oneof varid   = Setup.Pram,
        prompt      = STRING_TOKEN (STR_PRAM_PROMPT),
        help        = STRING_TOKEN (STR_PRAM_HELP),
        option text = STRING_TOKEN (STR_PRAM_64MB),  value = 0x33, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_PRAM_16MB),  value = 0x32, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_PRAM_4MB),   value = 0x31, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLE),    value = 0x30, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
#endif


  subtitle text = STRING_TOKEN(STR_OS_DNX_STRING);

    oneof varid   = Setup.IshI2c0PullUp,
      prompt      = STRING_TOKEN (STR_ISH_I2C0_GPIO_PULL_ENABLE_PROMPT),
      help        = STRING_TOKEN (STR_ISH_I2C0_GPIO_PULL_HELP),
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = Setup.IshI2c1PullUp,
      prompt      = STRING_TOKEN (STR_ISH_I2C1_GPIO_PULL_ENABLE_PROMPT),
      help        = STRING_TOKEN (STR_ISH_I2C1_GPIO_PULL_HELP),
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_PROC_TARCE_STRING);

     oneof varid   = Setup.ProcTraceMemSize,
        prompt      = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_PROMPT),
        help        = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_4KB),      value = 0,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8KB),      value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_16KB),     value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32KB),     value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64KB),     value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_128KB),    value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_256KB),    value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_512KB),    value = 7,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_1MB),      value = 8,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_2MB),      value = 9,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_4MB),      value = 10,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8MB),      value = 11,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_16MB),     value = 12,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32MB),     value = 13,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64MB),     value = 14,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_128MB),    value = 15,   flags = RESET_REQUIRED;
     endoneof;


      suppressif  ideqval Setup.ProcTraceMemSize == 0xFF;
          oneof varid   = Setup.ProcTraceEnable,
            prompt      = STRING_TOKEN(STR_PROC_TRACE_ENABLE_PROMPT),
            help        = STRING_TOKEN(STR_PROC_TRACE_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          oneof varid   = Setup.ProcTraceOutputScheme,
            prompt      = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_PROMPT),
            help        = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_HELP),
            option text = STRING_TOKEN(STR_SINGLE_RANGE_OUTPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_TOPA_OUTPUT),         value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  subtitle text = STRING_TOKEN(STR_DATA_CLEAR_STRING);
  text
    help   = STRING_TOKEN(STR_DATA_CLEAR_HELP),
    text   = STRING_TOKEN(STR_DATA_CLEAR),
    text   = STRING_TOKEN(STR_NULL_STRING),
    flags  = INTERACTIVE,
    key    = 0x1239; //KEY_DATA_CLEAR_KEYS;


endform;

