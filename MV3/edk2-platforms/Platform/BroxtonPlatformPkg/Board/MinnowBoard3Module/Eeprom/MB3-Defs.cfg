; @file
;  EEPROM structure definitions for Intel Test Platform
;
;  Copyright (c) 2015 - 2018, Intel Corporation. All rights reserved.<BR>
;
;  This program and the accompanying materials
;  are licensed and made available under the terms and conditions of the BSD License
;  which accompanies this distribution.  The full text of the license may be found at
;  http://opensource.org/licenses/bsd-license.php.
;
;  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
;  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
;

;
; Defines:
; Tool         = Tool name that should process this file
; Version      = Minimum required version of the tool
; Type         = Definitions -> Defines structures, Project -> Defines values for a platform
; Platform     = A nice human readable name describing the platform that the file is intended to be used with.
; ReqAlignment = The alignment required for each structure
;
[Defines]
Tool             = EEPROM
Version          = 0.6.0.1
Type             = Definitions
Platform         = Minnow Board 3
ReqAlignment     = 0x10
RequiredStructs  = EepromHeader|EepromMap|BoardInfoTable
MaxReqStructSize = 0x1000
RequiredIndex    = EepromHeader:0|EepromMap:1|BoardInfoTable:2

;
; Defines that if a structure contains a field with a specific name the filed must be updated with the
; associated data.  Multiple fields can be specified using the pipe (|) character.
;
; StructSize = FieldName = Update the field with the length of the current structure.
; BinSize    = FieldName = Update the filed with the length of the entire file.
; Crc32      = FieldName = Update the field with the CRC32 value of the entire file.
;
[Patch]
StructSize = Length
BinSize    = StructLength
Crc32      = Crc32

;
; Structure definitions:
; FieldName = Offset|Width|Default
;
; Optional Values:
; (Optional) RequiredFirst = 0/1 (Not required first/Required first) (Only one per active config)
;
[EepromHeader]
Signature       = 0x00|0x08|"$Eeprom$"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000020
StructLength    = 0x10|0x04|0x00000000      ; This field is filled in by the tool
Crc32           = 0x14|0x04|0x00000000      ; This field is filled in by the tool
CrcLength       = 0x18|0x04|0x00000000      ; This field is filled in by the tool
Version         = 0x1C|0x04|0x00000000      ; Version of the EEPROM binary
Reserved        = 0x20|0x10|0x00

[AcpiTable]
Signature       = 0x00|0x08|"$AcpiTbl"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
AcpiTbl         = 0x20|0x00|0x00            ; Load data using from_file

[BoardInfoTable]
Signature       = 0x00|0x08|"$BrdInfo"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
ManuName        = 0x10|0x10|""
BrdName         = 0x20|0x10|""
BrdSerial       = 0x30|0x10|""
BoardId         = 0x40|0x04|0x00000000
FabId           = 0x44|0x04|0x00000000
EcId            = 0x48|0x04|0x00000000
BoardType       = 0x4C|0x01|0x00
Reserved        = 0x4D|0x13|0x00

[EepromMap]
Signature       = 0x00|0x08|"$EeprMap"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
PartLabel       = 0x10|0x10|""              ; Part label
BlkLength       = 0x20|0x04|0x00010000      ; size of each map record
PageSize        = 0x24|0x02|0x0100
PartSize        = 0x26|0x04|0x00040000      ; total size of EEPROM
BusNumber       = 0x2A|0x01|0x00            ; I2C bus number for this EEPROM
Master          = 0x2B|0x01|0x01            ; 1 indicates this is the master EEPROM map structure
Speed           = 0x2C|0x01|0x01            ; Speed EEPROM should run at
                                            ;   1 - 100KHz (Standard speed)
                                            ;   2 - 400KHz (Fast speed)
                                            ;   3 - 3.4MHz (High speed)
Reserved        = 0x2D|0x03|0x00
MapData         = 0x30|0x00|0x00

[EepromMapRecord]
MapLabel        = 0x00|0x10|""
Length          = 0x10|0x04|0x00000000
Offset          = 0x14|0x04|0x00000000      ; offset in EEPROM binary
Address         = 0x18|0x01|0x0000          ; EEPROM I2C address for this block, 7-bit
Reserved        = 0x19|0x07|0x00

[GpioDataHeader]
Signature       = 0x00|0x08|"$GpioDat"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
GpioData        = 0x20|0x00|0x00

[GpioDataRecord]
GpioLabel       = 0x00|0x10|""
Length          = 0x10|0x04|0x00000030
Offset          = 0x14|0x04|0x00000000
AndData         = 0x18|0x04|0xFFFFFFFF
OrData          = 0x1C|0x04|0x00000000
DataSize        = 0x20|0x01|0x00
DataType        = 0x21|0x01|0x00
Reserved        = 0x22|0x0E|0x00

[HdaCodec]
Signature       = 0x00|0x08|"$HdCodec"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
HdaCodec        = 0x20|0x00|0x00            ; Load data using from_file

[MemoryData]
Signature       = 0x00|0x08|"$MemCnfg"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
SpdSlot         = 0x10|0x02|0x0000
Reserved        = 0x12|0x0E|0x00
SpdData         = 0x20|0x00|0x00            ; Load data using from_file

[NicInfo]
Signature       = 0x00|0x08|"$MacInfo"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
NicId           = 0x10|0x08|""
MacAddr         = 0x18|0x06|0x000000000000
NicNum          = 0x1E|0x02|0x0000
Reserved        = 0x20|0x10|0x00
NicData         = 0x30|0x00|0x00            ; Load data using from_file

[SignatureData]
Signature       = 0x00|0x08|"$PromSig"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0a|0x02|0x0000
Length          = 0x0c|0x04|0x00000000
HashType        = 0x10|0x02|0x0000
Reserved        = 0x12|0x0E|0x00
EepromSig       = 0x20|0x00|0x00
   ; - 0x0000 = None    - 0x00 byte hash
   ; - 0x0001 = MD5     - 0x10 byte hash [signable]
   ; - 0x0002 = SHA-1   - 0x14 byte hash [signable]
   ; - 0x0003 = SHA-256 - 0x20 byte hash [signable]
   ; - 0x0004 = SHA-384 - 0x30 byte hash
   ; - 0x0005 = SHA-512 - 0x40 byte hash
   ; - 0x8000 = Flag    - This hash is signed
   ;                      Currently, UEFI OpenSSL only supports signed MD5,
   ;                      SHA1, & SHA256 hashes. Since we store both the hash
   ;                      and signed hash, it is possible to hash with one and
   ;                      sign with another. Currently the code forces
   ;                      compliance to the UEFI OpenSSL signable hashes.

[Microcode]
Signature       = 0x00|0x08|"$uCode$"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0A|0x02|0x0000
Length          = 0x0C|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
UcodeData       = 0x20|0x00|0x00            ; Load data using from_file

[VideoData]
Signature       = 0x00|0x08|"$Video$"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0a|0x02|0x0000
Length          = 0x0c|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
VideoData       = 0x20|0x00|0x00            ; Load data using from_file

[LogoData]
Signature       = 0x00|0x08|"$Logo$"
VerMajor        = 0x08|0x02|0x0001
VerMinor        = 0x0a|0x02|0x0000
Length          = 0x0c|0x04|0x00000000
Reserved        = 0x10|0x10|0x00
LogoData        = 0x20|0x00|0x00            ; Load data using from_file
